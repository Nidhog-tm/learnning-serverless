AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  learnning_serverless

# SAMテンプレート共通の設定
Globals:
  Api:
    # APIGatewayの名前はswagger.yamlに書くのではなく、ここに記入する
    # swagger.yamlにはステージ変数しか渡すことができないため、swagger.yamlで環境ごとの差異を吸収することができない
    Name: learnning-serverless-apigw
  Function:
    Timeout: 29
    # 環境変数
    Environment:
      Variables:
        TZ: Asia/Tokyo
        LOG_LEVEL: 'DEBUG'

Resources:
  #     _    ____ ___    ____    _  _____ _______        ___ __   __
  #    / \  |  _ \_ _|  / ___|  / \|_   _| ____\ \      / / \\ \ / /
  #   / _ \ | |_) | |  | |  _  / _ \ | | |  _|  \ \ /\ / / _ \\ V /
  #  / ___ \|  __/| |  | |_| |/ ___ \| | | |___  \ V  V / ___ \| |
  # /_/   \_\_|  |___|  \____/_/   \_\_| |_____|  \_/\_/_/   \_\_|

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      # ここで指定するステージの他にデフォルトで "Stage"というステージが作られます
      StageName: "Prod"
      DefinitionUri: swagger.yaml
      MethodSettings:
        # CloudWatchLogsの有効化
        - DataTraceEnabled: true
          LoggingLevel: 'ERROR'
          ResourcePath: '/*'
          HttpMethod: '*'
      # ステージ変数 swagger.yamlでは ${stageVariables.Env} として参照することができます。
      # swagger.yamlはステージ変数としてAWS::AccountIdやAWS::Regionを保持させるとswagger.yaml内で読み込むことができません。
      # AWSリージョンとAWSアカウントIDが含まれるLambda関数のARNを一気に渡しても読み込めません。

  # APIGatewayのAPIをboto3で叩くためのロール
  APIGatewayDescribeIAMRole:
    DependsOn:
      - ApiGateway
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: apigateway-describe-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: apigateway-describe-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "apigateway:*"
                Resource: "arn:aws:apigateway:*::/*"
              - Effect: "Allow"
                Action: "logs:*"
                Resource: "*"
  #  _                    _         _            _    ____ ___
  # | |    __ _ _ __ ___ | |__   __| | __ _     / \  |  _ \_ _|
  # | |   / _` | '_ ` _ \| '_ \ / _` |/ _` |   / _ \ | |_) | |
  # | |__| (_| | | | | | | |_) | (_| | (_| |  / ___ \|  __/| |
  # |_____\__,_|_| |_| |_|_.__/ \__,_|\__,_| /_/   \_\_|  |___|

  HelloWorld:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: HelloWorld-function
      Description: 
      CodeUri: app/build
      Handler: index.handler
      Runtime: python3.6
      Role: 
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  Hello:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: hello-name-function
      Description: 
      CodeUri: app/build
      Handler: hello.handler
      Runtime: python3.6
      Role: 
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  GetDBList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-db-list-function
      Description: 
      CodeUri: app/build
      Handler: get_db_list.handler
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Runtime: python3.6
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  GetDBListLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetDBList}
      RetentionInDays: 30
  # APIGatewayから呼び出されるLambdaには権限を付与する必要がある
  GetDBListPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn: GetDBListAliaslive
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${GetDBList.Arn}:live
      Principal: apigateway.amazonaws.com

  AddDBList:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: add-db-list-function
      Description: 
      CodeUri: app/build
      Handler: add_db_list.handler
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      Runtime: python3.6
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  AddDBListLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AddDBList}
      RetentionInDays: 30
  # APIGatewayから呼び出されるLambdaには権限を付与する必要がある
  AddDBListPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn: AddDBListAliaslive
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${AddDBList.Arn}:live
      Principal: apigateway.amazonaws.com

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-Execution-Role
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonDynamoDBFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
